#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ —Å–µ—Å—Å–∏–π Claude Code
–ü–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import json
import os
from pathlib import Path
from datetime import datetime, timedelta
from collections import defaultdict

def analyze_session_logs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ —Å–µ—Å—Å–∏–π –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    project_dir = Path(__file__).parent.parent.parent
    logs_dir = project_dir / '.claude' / 'logs'
    
    if not logs_dir.exists():
        print("üìÅ –õ–æ–≥–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏—Å—å. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å Claude Code!")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
    log_files = list(logs_dir.glob('sessions-*.log'))
    
    if not log_files:
        print("üìù –õ–æ–≥–∏ —Å–µ—Å—Å–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç—ã")
        return
    
    sessions = []
    prompts = []
    
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
    for log_file in sorted(log_files):
        with open(log_file, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    entry = json.loads(line.strip())
                    if entry['event_type'] == 'session_start':
                        sessions.append(entry)
                    elif entry['event_type'] == 'user_prompt':
                        prompts.append(entry)
                except json.JSONDecodeError:
                    continue
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"üéØ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
    print(f"üí¨ –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompts)}")
    
    if sessions:
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è
        last_session = max(sessions, key=lambda x: x['timestamp'])
        last_time = datetime.fromisoformat(last_session['timestamp'])
        print(f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_time.strftime('%Y-%m-%d %H:%M')}")
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
        daily_activity = defaultdict(int)
        for session in sessions:
            date = datetime.fromisoformat(session['timestamp']).strftime('%Y-%m-%d')
            daily_activity[date] += 1
        
        print(f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {len(daily_activity)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        print("\nüìà –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):")
        for i in range(7):
            date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
            count = daily_activity.get(date, 0)
            bar = "‚ñà" * min(count, 20)
            print(f"  {date}: {bar} ({count} —Å–µ—Å—Å–∏–π)")
    
    if prompts:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        total_chars = sum(p.get('prompt_length', 0) for p in prompts)
        avg_length = total_chars / len(prompts) if prompts else 0
        
        print(f"\nüí≠ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ú–ü–¢–û–í:")
        print(f"  üìù –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  üìä –û–±—â–∏–π –æ–±—ä–µ–º: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–º–ø—Ç—ã
        recent_prompts = sorted(prompts, key=lambda x: x['timestamp'])[-5:]
        print(f"\nüîç –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–†–û–°–´:")
        for prompt in recent_prompts:
            time = datetime.fromisoformat(prompt['timestamp']).strftime('%H:%M')
            preview = prompt.get('prompt_preview', '–Ω–µ—Ç –ø—Ä–µ–≤—å—é')
            print(f"  {time}: {preview}")

if __name__ == "__main__":
    analyze_session_logs()